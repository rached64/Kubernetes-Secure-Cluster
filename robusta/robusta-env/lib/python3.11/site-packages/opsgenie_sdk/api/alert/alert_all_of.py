# coding: utf-8

"""
    Python SDK for Opsgenie REST API

    Python SDK for Opsgenie REST API  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@opsgenie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AlertAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'actions': 'list[str]',
        'entity': 'str',
        'description': 'str',
        'details': 'dict(str, str)'
    }

    attribute_map = {
        'actions': 'actions',
        'entity': 'entity',
        'description': 'description',
        'details': 'details'
    }

    def __init__(self, actions=None, entity=None, description=None, details=None):  # noqa: E501
        """AlertAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._actions = None
        self._entity = None
        self._description = None
        self._details = None
        self.discriminator = None

        if actions is not None:
            self.actions = actions
        if entity is not None:
            self.entity = entity
        if description is not None:
            self.description = description
        if details is not None:
            self.details = details

    @property
    def actions(self):
        """Gets the actions of this AlertAllOf.  # noqa: E501


        :return: The actions of this AlertAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AlertAllOf.


        :param actions: The actions of this AlertAllOf.  # noqa: E501
        :type: list[str]
        """

        self._actions = actions

    @property
    def entity(self):
        """Gets the entity of this AlertAllOf.  # noqa: E501


        :return: The entity of this AlertAllOf.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this AlertAllOf.


        :param entity: The entity of this AlertAllOf.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def description(self):
        """Gets the description of this AlertAllOf.  # noqa: E501


        :return: The description of this AlertAllOf.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlertAllOf.


        :param description: The description of this AlertAllOf.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this AlertAllOf.  # noqa: E501


        :return: The details of this AlertAllOf.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AlertAllOf.


        :param details: The details of this AlertAllOf.  # noqa: E501
        :type: dict(str, str)
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
