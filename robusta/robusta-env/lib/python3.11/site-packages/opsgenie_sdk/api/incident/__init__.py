# coding: utf-8

"""
    Python SDK for Opsgenie REST API

    Python SDK for Opsgenie REST API  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@opsgenie.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401
import six

from opsgenie_sdk.api_client import ApiClient
from opsgenie_sdk.exceptions import (
    ApiTypeError,
    ApiValueError
)


# python 2 and python 3 compatibility library


class IncidentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def close_incident(self, identifier, **kwargs):  # noqa: E501
        """Close Incident  # noqa: E501

        Closes incident with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_incident(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifier of incident which could be incident id or tiny id (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'tiny. Default is id'
        :param CloseIncidentPayload close_incident_payload: Request payload of closing incident action
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.close_incident_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.close_incident_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def close_incident_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Close Incident  # noqa: E501

        Closes incident with given identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_incident_with_http_info(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifier of incident which could be incident id or tiny id (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'tiny. Default is id'
        :param CloseIncidentPayload close_incident_payload: Request payload of closing incident action
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['identifier', 'identifier_type', 'close_incident_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method close_incident" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in local_var_params or
                local_var_params['identifier'] is None):
            raise ApiValueError("Missing the required parameter `identifier` when calling `close_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in local_var_params:
            path_params['identifier'] = local_var_params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in local_var_params:
            query_params.append(('identifierType', local_var_params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'close_incident_payload' in local_var_params:
            body_params = local_var_params['close_incident_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{identifier}/close', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_incident(self, create_incident_payload, **kwargs):  # noqa: E501
        """Create Incident  # noqa: E501

        Creates a new incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_incident(create_incident_payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateIncidentPayload create_incident_payload: Request payload of created incident (required)
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_incident_with_http_info(create_incident_payload, **kwargs)  # noqa: E501
        else:
            (data) = self.create_incident_with_http_info(create_incident_payload, **kwargs)  # noqa: E501
            return data

    def create_incident_with_http_info(self, create_incident_payload, **kwargs):  # noqa: E501
        """Create Incident  # noqa: E501

        Creates a new incident  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_incident_with_http_info(create_incident_payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateIncidentPayload create_incident_payload: Request payload of created incident (required)
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['create_incident_payload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_incident" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'create_incident_payload' is set
        if ('create_incident_payload' not in local_var_params or
                local_var_params['create_incident_payload'] is None):
            raise ApiValueError("Missing the required parameter `create_incident_payload` when calling `create_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_incident_payload' in local_var_params:
            body_params = local_var_params['create_incident_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_incident(self, identifier, **kwargs):  # noqa: E501
        """Delete Incident  # noqa: E501

        Deletes an incident using incident id or the tiny id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_incident(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifier of incident which could be incident id or tiny id (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'tiny. Default is id'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_incident_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_incident_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def delete_incident_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Delete Incident  # noqa: E501

        Deletes an incident using incident id or the tiny id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_incident_with_http_info(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifier of incident which could be incident id or tiny id (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'tiny. Default is id'
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['identifier', 'identifier_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_incident" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in local_var_params or
                local_var_params['identifier'] is None):
            raise ApiValueError("Missing the required parameter `identifier` when calling `delete_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in local_var_params:
            path_params['identifier'] = local_var_params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in local_var_params:
            query_params.append(('identifierType', local_var_params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{identifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_incident(self, identifier, **kwargs):  # noqa: E501
        """Get Incident  # noqa: E501

        Returns incident with given id, tiny id or alias  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_incident(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifier of incident which could be incident id or tiny id (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'tiny. Default is id'
        :return: GetIncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_incident_with_http_info(identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_incident_with_http_info(identifier, **kwargs)  # noqa: E501
            return data

    def get_incident_with_http_info(self, identifier, **kwargs):  # noqa: E501
        """Get Incident  # noqa: E501

        Returns incident with given id, tiny id or alias  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_incident_with_http_info(identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identifier: Identifier of incident which could be incident id or tiny id (required)
        :param str identifier_type: Type of the identifier that is provided as an in-line parameter. Possible values are 'id' or 'tiny. Default is id'
        :return: GetIncidentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['identifier', 'identifier_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_incident" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'identifier' is set
        if ('identifier' not in local_var_params or
                local_var_params['identifier'] is None):
            raise ApiValueError("Missing the required parameter `identifier` when calling `get_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identifier' in local_var_params:
            path_params['identifier'] = local_var_params['identifier']  # noqa: E501

        query_params = []
        if 'identifier_type' in local_var_params:
            query_params.append(('identifierType', local_var_params['identifier_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIncidentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_incident_request_status(self, request_id, **kwargs):  # noqa: E501
        """Get Request Status of Incident  # noqa: E501

        Used to track the status and incident details (if any) of the request whose identifier is given  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_incident_request_status(request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request_id: Universally unique identifier of the questioned request (required)
        :return: GetIncidentRequestStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_incident_request_status_with_http_info(request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_incident_request_status_with_http_info(request_id, **kwargs)  # noqa: E501
            return data

    def get_incident_request_status_with_http_info(self, request_id, **kwargs):  # noqa: E501
        """Get Request Status of Incident  # noqa: E501

        Used to track the status and incident details (if any) of the request whose identifier is given  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_incident_request_status_with_http_info(request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request_id: Universally unique identifier of the questioned request (required)
        :return: GetIncidentRequestStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_incident_request_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'request_id' is set
        if ('request_id' not in local_var_params or
                local_var_params['request_id'] is None):
            raise ApiValueError("Missing the required parameter `request_id` when calling `get_incident_request_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'request_id' in local_var_params:
            path_params['requestId'] = local_var_params['request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/requests/{requestId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIncidentRequestStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_incidents(self, query, **kwargs):  # noqa: E501
        """List incidents  # noqa: E501

        Return list of incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_incidents(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search query to apply while filtering the incidents. (required)
        :param int offset: Start index of the result set (to apply pagination). Minimum value (and also default value) is 0.
        :param int limit: Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
        :param str sort: Name of the field that result set will be sorted by
        :param str order: Sorting order of the result set
        :return: ListIncidentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_incidents_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.list_incidents_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def list_incidents_with_http_info(self, query, **kwargs):  # noqa: E501
        """List incidents  # noqa: E501

        Return list of incidents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_incidents_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search query to apply while filtering the incidents. (required)
        :param int offset: Start index of the result set (to apply pagination). Minimum value (and also default value) is 0.
        :param int limit: Maximum number of items to provide in the result. Must be a positive integer value. Default value is 20 and maximum value is 100
        :param str sort: Name of the field that result set will be sorted by
        :param str order: Sorting order of the result set
        :return: ListIncidentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query', 'offset', 'limit', 'sort', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_incidents" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in local_var_params or
                local_var_params['query'] is None):
            raise ApiValueError("Missing the required parameter `query` when calling `list_incidents`")  # noqa: E501

        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `list_incidents`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] > 100:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `list_incidents`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `list_incidents`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in local_var_params:
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'sort' in local_var_params:
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'order' in local_var_params:
            query_params.append(('order', local_var_params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['GenieKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListIncidentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
