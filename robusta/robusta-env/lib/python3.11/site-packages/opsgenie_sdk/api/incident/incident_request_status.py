# coding: utf-8

"""
    Python SDK for Opsgenie REST API

    Python SDK for Opsgenie REST API  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@opsgenie.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IncidentRequestStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'success': 'bool',
        'action': 'str',
        'processed_at': 'datetime',
        'integration_id': 'str',
        'is_success': 'bool',
        'status': 'str',
        'incident_id': 'str'
    }

    attribute_map = {
        'success': 'success',
        'action': 'action',
        'processed_at': 'processedAt',
        'integration_id': 'integrationId',
        'is_success': 'isSuccess',
        'status': 'status',
        'incident_id': 'incidentId'
    }

    def __init__(self, success=None, action=None, processed_at=None, integration_id=None, is_success=None, status=None, incident_id=None):  # noqa: E501
        """IncidentRequestStatus - a model defined in OpenAPI"""  # noqa: E501

        self._success = None
        self._action = None
        self._processed_at = None
        self._integration_id = None
        self._is_success = None
        self._status = None
        self._incident_id = None
        self.discriminator = None

        if success is not None:
            self.success = success
        if action is not None:
            self.action = action
        if processed_at is not None:
            self.processed_at = processed_at
        if integration_id is not None:
            self.integration_id = integration_id
        if is_success is not None:
            self.is_success = is_success
        if status is not None:
            self.status = status
        if incident_id is not None:
            self.incident_id = incident_id

    @property
    def success(self):
        """Gets the success of this IncidentRequestStatus.  # noqa: E501


        :return: The success of this IncidentRequestStatus.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this IncidentRequestStatus.


        :param success: The success of this IncidentRequestStatus.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def action(self):
        """Gets the action of this IncidentRequestStatus.  # noqa: E501


        :return: The action of this IncidentRequestStatus.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IncidentRequestStatus.


        :param action: The action of this IncidentRequestStatus.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def processed_at(self):
        """Gets the processed_at of this IncidentRequestStatus.  # noqa: E501


        :return: The processed_at of this IncidentRequestStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._processed_at

    @processed_at.setter
    def processed_at(self, processed_at):
        """Sets the processed_at of this IncidentRequestStatus.


        :param processed_at: The processed_at of this IncidentRequestStatus.  # noqa: E501
        :type: datetime
        """

        self._processed_at = processed_at

    @property
    def integration_id(self):
        """Gets the integration_id of this IncidentRequestStatus.  # noqa: E501


        :return: The integration_id of this IncidentRequestStatus.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this IncidentRequestStatus.


        :param integration_id: The integration_id of this IncidentRequestStatus.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def is_success(self):
        """Gets the is_success of this IncidentRequestStatus.  # noqa: E501


        :return: The is_success of this IncidentRequestStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this IncidentRequestStatus.


        :param is_success: The is_success of this IncidentRequestStatus.  # noqa: E501
        :type: bool
        """

        self._is_success = is_success

    @property
    def status(self):
        """Gets the status of this IncidentRequestStatus.  # noqa: E501


        :return: The status of this IncidentRequestStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IncidentRequestStatus.


        :param status: The status of this IncidentRequestStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def incident_id(self):
        """Gets the incident_id of this IncidentRequestStatus.  # noqa: E501


        :return: The incident_id of this IncidentRequestStatus.  # noqa: E501
        :rtype: str
        """
        return self._incident_id

    @incident_id.setter
    def incident_id(self, incident_id):
        """Sets the incident_id of this IncidentRequestStatus.


        :param incident_id: The incident_id of this IncidentRequestStatus.  # noqa: E501
        :type: str
        """

        self._incident_id = incident_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentRequestStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
